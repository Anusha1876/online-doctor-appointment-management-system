package com.doctorapp.services;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.mail.SimpleMailMessage;
//import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import com.doctorapp.entities.Appointment;
import com.doctorapp.entities.Doctor;
import com.doctorapp.entities.Patient;
import com.doctorapp.repositories.AppointmentRepository;
import com.twilio.Twilio;
import com.twilio.rest.api.v2010.account.Message;
import com.twilio.type.PhoneNumber;


@Service
public class AppointmentService {
	
	@Autowired
	AppointmentRepository appointmentRepository;
	
	@Autowired
	JavaMailSender javaMailSender;
	
	

	public List<Appointment> getAllAppointments() {
		return appointmentRepository.findAll();
	}
	
	
    public Appointment saveAppointment(Appointment a) {
        Appointment aa = appointmentRepository.save(a);
        if(aa != null) {
            sendAppointmentConfirmationEmail(aa);
            sendAppointmentConfirmationSMS(aa);
            sendAppointmentConfirmationWhatsApp(aa);
        }
        return aa;
    }

    private void sendAppointmentConfirmationEmail(Appointment aa) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom("ganjikuntaanusha4@gmail.com");
        message.setTo(aa.getPatient_id().getLogin_id().getUserName(), aa.getDoctor_id().getLogin_id().getUserName());
        message.setSubject("Appointment Booking");

        message.setText("Appointment Booked Successfully\n" +
                "Appointment Date & Time: " + aa.getAppointmentDate() + " " + aa.getAppointmentTime() + "\n" +
                "Doctor Details:\n" +
                "Doctor Name: " + aa.getDoctor_id().getFirstName() + " " + aa.getDoctor_id().getLastName() + " (Speciality: " + aa.getDoctor_id().getSpeciality() + ")\n" +
                "Patient Details:\n" +
                "Patient Name: " + aa.getPatient_id().getFirstName() + " " + aa.getPatient_id().getLastName() + " (Mobile Number: " + aa.getPatient_id().getMobileNumber() + ")\n" +
                "Location: " + aa.getDoctor_id().getArea_id().getAreaName() + " " + aa.getDoctor_id().getArea_id().getCity_id().getCityName() + " " + aa.getDoctor_id().getArea_id().getCity_id().getState_id().getStateName());

        javaMailSender.send(message);
    }
    
    private void sendAppointmentConfirmationSMS(Appointment aa) {
        // Twilio credentials
        String ACCOUNT_SID = "ACf98490a98c459ac6cb9507ccad01e754";
        String AUTH_TOKEN = "960e353516335506401e103d5d4260c4";
        
        // Initialize Twilio
        Twilio.init(ACCOUNT_SID, AUTH_TOKEN);
        
        // Phone number to send SMS to
        String toPhoneNumber = "+91" + aa.getPatient_id().getMobileNumber(); // Assuming this returns the patient's phone number
        
        // Twilio phone number (must be purchased and verified in Twilio)
        String fromPhoneNumber = "+16464900858";
        
        // Message to send
        String messageBody = "Appointment Booked Successfully\n" +
        		"Appointment Date & Time: " + aa.getAppointmentDate() + " " + aa.getAppointmentTime() + "\n" +
        		"Doctor Details:\n" +
        		"Doctor Name: " + aa.getDoctor_id().getFirstName() + " " + aa.getDoctor_id().getLastName() + " (Speciality: " + aa.getDoctor_id().getSpeciality() + ")\n" +
        		 "Patient Details:\n" +
        		 "Patient Name: " + aa.getPatient_id().getFirstName() + " " + aa.getPatient_id().getLastName() + " (Mobile Number: " + aa.getPatient_id().getMobileNumber() + ")\n" +
        		 "Location: " + aa.getDoctor_id().getArea_id().getAreaName() + " " + aa.getDoctor_id().getArea_id().getCity_id().getCityName() + " " + aa.getDoctor_id().getArea_id().getCity_id().getState_id().getStateName();

        // Send SMS using Twilio
        Message message = Message.creator(
                new PhoneNumber(toPhoneNumber),
                new PhoneNumber(fromPhoneNumber),
                messageBody)
            .create();
    }
    
    private void sendAppointmentConfirmationWhatsApp(Appointment aa) {
        // Twilio credentials
        String ACCOUNT_SID = "ACf98490a98c459ac6cb9507ccad01e754";
        String AUTH_TOKEN = "960e353516335506401e103d5d4260c4";

        // Initialize Twilio
        Twilio.init(ACCOUNT_SID, AUTH_TOKEN);

        // Phone number to send WhatsApp message to
        String toPhoneNumber = "whatsapp:+91" + aa.getPatient_id().getMobileNumber(); // Assuming this returns the patient's phone number

        // Twilio WhatsApp number (must be purchased and verified in Twilio)
        String fromPhoneNumber = "whatsapp:+14155238886";

        // Message to send
        String messageBody = "Appointment Booked Successfully. Appointment Date & Time: " + aa.getAppointmentDate() + " " + aa.getAppointmentTime();

        // Send WhatsApp message using Twilio
        Message message = Message.creator(
                new com.twilio.type.PhoneNumber(toPhoneNumber),
                new com.twilio.type.PhoneNumber(fromPhoneNumber),
                messageBody)
                .create();
    }

//	public List<Appointment> getAppointmentsByDoctorId(Doctor d, Date date1) {
//		return appointmentRepository.getAppointmentsByDoctorId(d,date1);
//	}
	
	
	public List<Appointment> getAppointmentsByDoctorId(Doctor d) {
		String pattern = "yyyy-MM-dd";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		String date = simpleDateFormat.format(new Date());
		System.out.println(date);
		Date date1 = null;
		try {
			date1 = new SimpleDateFormat("yyyy-MM-dd").parse(date);
		}catch (ParseException e) {
			e.printStackTrace();
		}
		System.out.println(date1);
		return appointmentRepository.getAppointmentsByDoctorId(d,date1);
	}
	

	public Appointment cancelAppointment(Appointment a) {
		Appointment aa = appointmentRepository.save(a);
		if(aa != null) {
			SimpleMailMessage smm = new SimpleMailMessage();
			smm.setFrom("ganjikuntaanusha4@gmail.com");
			smm.setTo(aa.getPatient_id().getLogin_id().getUserName(),aa.getDoctor_id().getLogin_id().getUserName());
			smm.setSubject("Appointment Cancelled");			
			smm.setText("Appointment Cancelled \nCancelled By : "+aa.getCancelledBy()+"\nAppointment Date & Time : "+aa.getAppointmentDate()+" "+
			aa.getAppointmentTime()+"\nDoctor Details : \nDoctor Name :" + aa.getDoctor_id().getFirstName()+" "+aa.getDoctor_id().getLastName()+
			" (Speciality : "+aa.getDoctor_id().getSpeciality()+")\nPatient Details : \nPatient Name : "+aa.getPatient_id().getFirstName()+" "+aa.getPatient_id().getLastName()
			+" (Mobile Number : "+aa.getPatient_id().getMobileNumber()+")\nLocation : "+aa.getDoctor_id().getArea_id().getAreaName()+" "+
			aa.getDoctor_id().getArea_id().getCity_id().getCityName()+" "+aa.getDoctor_id().getArea_id().getCity_id().getState_id().getStateName());
			javaMailSender.send(smm);
			return aa;
		}
		else {
			return null;
		}
	}

//	public List<Appointment> getAppointmentHistoryByDoctorId(Doctor d, Date date1) {
//		return appointmentRepository.getAppointmentHistoryByDoctorId(d,date1);
//	}
	
	public List<Appointment> getAppointmentHistoryByDoctorId(Doctor d) {
		String pattern = "yyyy-MM-dd";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		String date = simpleDateFormat.format(new Date());
		System.out.println(date);
		Date date1 = null;
		try {
			date1 = new SimpleDateFormat("yyyy-MM-dd").parse(date);
		}catch(ParseException e) {
			e.printStackTrace();
		}
		System.out.println(date1);
		return appointmentRepository.getAppointmentHistoryByDoctorId(d,date1);
	}

	public List<Object> getBookedAppointmentsByDoctorIdandDate(Doctor d, Date date) {
		return appointmentRepository.getBookedAppointmentsByDoctorIdandDate(d,date);
	}

	public List<Appointment> getCurrentAppointmentsByPatientId(Patient p) {
		String pattern = "yyyy-MM-dd";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		String date = simpleDateFormat.format(new Date());
		System.out.println(date);
		Date date1 = null;
		try {
			date1=new SimpleDateFormat("yyyy-MM-dd").parse(date);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		System.out.println(date1);
		return appointmentRepository.getCurrentAppointmentsByPatientId(p,date1);
	}

	public List<Appointment> getAppointmentHistoryByPatientId(Patient p) {
		String pattern = "yyyy-MM-dd";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		String date = simpleDateFormat.format(new Date());
		System.out.println(date);
		Date date1 = null;
		try {
			date1=new SimpleDateFormat("yyyy-MM-dd").parse(date);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(date1);
		return appointmentRepository.getAppointmentHistoryByPatientId(p,date1);
	}

}














